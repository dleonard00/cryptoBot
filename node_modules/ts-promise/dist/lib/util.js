"use strict";
/**
 * Helper utilities.
 *
 * Copyright (C) 2015 Martin Poelstra
 * License: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Throw an Error when given condition is false.
 *
 * @param {any}    condition Condition, no-op when truthy, error thrown when falsy
 * @param {string} msg       Optional text to include in error message
 */
function assert(condition, msg) {
    if (!condition) {
        throw new Error(msg ? "assertion failed: " + msg : "assertion failed");
    }
}
exports.assert = assert;
/**
 * Return reference to the global object (if possible).
 *
 * @return {any} Reference to the global object (e.g. `window`, `global`, etc.),
 *               or `undefined` if it could not be determined.
 */
function getGlobal() {
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    // Otherwise, try to use `this`.
    // We use eval-like behavior, because it will not inherit our "use strict",
    // see http://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript
    var g;
    try {
        g = new Function("return this")();
    }
    catch (e) {
        // Content Security Policy might not allow the eval()-evilness above,
        // so just ignore then...
    }
    return g;
}
exports.getGlobal = getGlobal;
//# sourceMappingURL=util.js.map