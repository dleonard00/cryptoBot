export declare class Async {
    private _pool;
    private _ring;
    private _current;
    private _flusher;
    private _flushing;
    private _scheduled;
    private _scheduler;
    /**
     * Configure alternative scheduler to use.
     * The scheduler function will be called with a flusher, which needs to be
     * executed to flush the queue. Note: the flusher may throw an
     * exception, if any of the callbacks on the queue throws one.
     * This will result in another flush to be scheduled before returning.
     *
     * Call with `undefined` to reset the scheduler to the default (setImmediate).
     *
     * Example usage (this is basically the default):
     *   setScheduler((flusher) => setImmediate(flusher));
     */
    setScheduler(scheduler: (flusher: () => void) => void): void;
    enqueue(callback: (arg: any) => void, arg: any): void;
    flush(): void;
    private _schedule();
    private _scheduledFlush();
}
export declare var async: Async;
export default async;
